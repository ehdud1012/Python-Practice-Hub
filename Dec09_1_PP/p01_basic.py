# -*- coding:utf-8 -*-

# 주석 #
#     1번째 줄  : 인코딩 언어 설정 (주석 X)

# 둘다 정통 OOP 언어 - 하는일 똑같음
# Java 
#     - 프로젝트 개념 O (중요)
#     - 언어 설계 자체가 Perfect한 OOL (객체 지향 언어)
#        (객체지향을 하고 싶지 않은데 객체 지향 사용해야함)
#         1 file = 1 class
#         함수 X (메소드 O)
#       => 규칙의 언어, 융통성 X, 소스 보기 편함 (대소문자 구분) = 정돈됨
#     - 저급 언어 (사람이 신경쓸게 많은) (Python 과 비교해서 저급이지 중급정도)
#          => 컴퓨터 입장에서 효율적인 프로그램
#     - compiler 방식
#         소스 전체 작업해놓고 -전체를 기계어로 번역(compiler)-> ...
#         compiler이 불가능하면 error
#     - 표준적인(평범한) 문법
#           엔터, 띄어쓰기 의미 X
#           문장 끝은 ; 
#           영역 구분 {}

# Python
#     - 프로젝트 개념 X -> 폴더 만들어서 사용
#     - hybrid한 OOL
#         (객체 지향을 하고 싶지 않으면 안해도 됨 / 아님말고)
#         1 file = 1 module (class X)
#         함수, 메소드 O
#       => 자유의 언어, 융통성 O, 혼란 (소스 보기가 힘듬)
#     - 고급언어 (언어 자체적으로 자동처리)
#          => 사람이 프로그래밍하기 편함(효율성 ↓ /  메모리 더 차지)
#     - interpreter 방식 (HTML, CSS, ...)
#         냅다 실행 -> 소스 한줄씩 기계어로 변역해서 실행
#         대화형 처리 가능
#         에러 잡기가 ....ㅠ
#     - 아웃라이어 (특이한 문법) 
#           엔터, ; : 둘다 문장 끝으로 인식   
#           영역 구분 ( : + 들여쓰기 )
#           줄 맞춤 중요 .. => 줄 정렬 (기대 ㄴㄴ)

a = 3
if a > 5:
    print("5");
print("aa");